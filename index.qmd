---
title: "Field Campaign of Bourgneuf Bay 2025 - REWRITE"
author: "Simon Oiry"
editor_options: 
  chunk_output_type: console
editor: 
  markdown: 
    wrap: 72
---

::: {style="text-align: center; margin-top: 20px;"}
<button onclick="window.open(&#39;https://github.com/SigOiry/Fieldtrip_Rewrite_Sept2025/raw/refs/heads/main/Output/Data_REWRITE_Bourgneuf_bay.zip&#39;, &#39;_blank&#39;);" style="padding: 10px 20px; background-color: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer;">

Download all the data of that campaign
</button>
:::

# Field trip organisation

The summer field campaign in Bourgneuf Bay took place on September 11th,
2025, at the Barbâtre meadow. Low tide occurred at 14:20 local time,
with a tidal range of 4.75 m. We arrived on site around 11:00. Two
distinct sampling areas were selected based on the historical
consistency of meadow density over the past 40 years. One area, where
the meadow has consistently shown more than 50% seagrass cover every
year for the last 40 years, was selected (Zone H), as well as an area
where meadow cover has been highly inconsistent over the same period
(Zone L). In each zone, 30 cores were collected, covering a gradient of
seagrass cover from low (SPC \< 20%) to high (SPC \> 80%). Each core was
20 cm deep to harvest seagrass leaves, rhizomes, and associated fauna.


## What has been done in each area ?

**Zone L :**

-   Photo quadrat

-   Coring

-   Above and Bellow ground biomass (Dry weight)

-   Bivalves Diversity and Density

-   Sediment Sampling

**Zone H :**

-   Photo quadrat

-   Coring

-   Above and Bellow ground biomass (Dry weight)

-   Bivalves Diversity and Density

-   Carbon Estimation

-   Hyperspectral measurments

-   Sediment Sampling

# Above Ground vs Below Ground biomass

```{r image patchwork}
#| echo: false
#| error: false
#| message: false
#| warning: false
#| eval: false

# install.packages(c("magick", "tidyverse"))  # if needed
library(magick)
library(tidyverse)

library(magick)
library(tidyverse)

make_image_grid_tidy <- function(
  img_paths,
  ncol = 10,
  cell_size = 320,
  font_size = 50,
  outfile  = "grid.png",
  pad = 10,
  bg = "white",
  label_color = "white",
  label_box   = "#00000080",
  letterbox = FALSE
) {
  stopifnot(length(img_paths) > 0)

  # helper: square & label one image
  square_and_label <- function(path, name) {
    img <- image_read(path)
    img <- if (letterbox) {
      img |>
        image_resize(paste0(cell_size, "x", cell_size)) |>
        image_extent(paste0(cell_size, "x", cell_size),
                     gravity = "center", color = bg)
    } else {
      img |>
        image_resize(paste0(cell_size, "x", cell_size, "^")) |>
        image_crop(paste0(cell_size, "x", cell_size, "+0+0"))
    }
    image_annotate(
      img, text = name, gravity = "southeast",
      size = font_size, color = label_color, boxcolor = label_box,
      location = paste0("+", pad, "+", pad)
    )
  }

  # tiles
  tiles_tbl <- tibble(path = img_paths) |>
    mutate(name = basename(path),
           img  = map2(path, name, square_and_label))

  # pad to complete last row
  n <- nrow(tiles_tbl)
  nrow_g <- ceiling(n / ncol)
  total  <- nrow_g * ncol
  if (total > n) {
    blanks <- tibble(
      path = NA_character_,
      name = "",
      img  = map(seq_len(total - n), ~ image_blank(cell_size, cell_size, color = bg))
    )
    tiles_tbl <- bind_rows(tiles_tbl, blanks)
  }

  # row/col indices
  tiles_tbl <- tiles_tbl |>
    mutate(idx = row_number(),
           row = ceiling(idx / ncol),
           col = ((idx - 1) %% ncol) + 1) |>
    arrange(row, col)

  # build each row (horizontally), then stack rows (vertically)
  row_imgs <- tiles_tbl |>
    group_split(row, keep = FALSE) |>
    map(~ {
      imgs <- .x$img
      image_append(image_join(imgs), stack = FALSE)
    })

  final <- image_append(image_join(row_imgs), stack = TRUE)

  image_write(final, path = outfile)
  message("Wrote: ", normalizePath(outfile))
  invisible(outfile)
}

files <- list.files("data/imgs", pattern = "\\.(jpe?g|tif?f)$", full.names = TRUE)
make_image_grid_tidy(files, ncol = 10, cell_size = 800, outfile = "data/imgs/grid.png")

```

```{r image patchwork}
#| echo: false
#| error: false
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 10
#| out-width: "95%"
#| label: fig-images
#| fig-cap: Patchwork of the 60 photo-quadrat corresponding to the 60 cores performed during the Rewrite field campaign of Bourgneuf Bay. From top-left to bottom right H_01 to H_30 followed by L_01 to L_30.

htmltools::HTML('
<figure>
  <img id="gridimg" src="data/imgs/grid.png" alt="Patchwork of the 60 photo-quadrats" style="max-width:95%; cursor:grab; touch-action:none;" />
</figure>

<link rel="preload" as="script" href="https://cdn.jsdelivr.net/npm/@panzoom/panzoom/dist/panzoom.min.js">
<script src="https://cdn.jsdelivr.net/npm/@panzoom/panzoom/dist/panzoom.min.js"></script>
<script>
document.addEventListener("DOMContentLoaded", function () {
  const el = document.getElementById("gridimg");
  const pz = Panzoom(el, { maxScale: 8, contain: "outside" });
  el.parentElement.addEventListener("wheel", pz.zoomWithWheel);
});
</script>
')

```

The samples were sorted to separate seagrass above-ground biomass (AGB) from below-ground biomass (BGB), and bivalves were counted and identified. After sorting, the leaf and rhizome fractions were dried for 48 h at 60 °C in a drying oven and then weighed on a precision balance to obtain dry mass for each core. @fig-Above_Below shows the relationship between BGB and AGB for all 60 cores collected in the field. 
```{r Plot above vs below}
#| label: fig-Above_Below
#| fig-cap: Relationship between the above and below ground biomass
#| echo: false
#| error: false
#| message: false
#| warning: false
#| out-width: "95%"

library(ggplot2)
library(ggiraph)
library(dplyr)
library(scales)
library(tidyverse)

Core_Diameter <- 15 ### diameter of the core used for sampling (in cm)

core_area <- pi*((Core_Diameter/2)^2) #### Area of the core

correction_factor <- (100*100)/core_area #### Correction factor to convert the dry weight to g/m²

dryweight <- readxl::read_xlsx("data/DryWeight_Cores.xlsx") %>% 
  mutate(A = A*correction_factor,
         B = B*correction_factor, 
         Area = substr(Station,1,1))### Convert the dryweight to be in g/m²

lm<- lm(dryweight$B ~ dryweight$A)$coefficients

p <- ggplot(
  dryweight,
  aes(x = A, y = B)
) +
  geom_smooth(method = "lm", se = TRUE, alpha = 0.1, linewidth = 1,
    color = "black") +
  geom_point_interactive(
    aes(color = Area,
      tooltip = paste0(
        "Sample: ", Station, "\n",
        "Above ground: ", number(A, accuracy = 0.01), " g/m²\n",
        "Below ground: ", number(B, accuracy = 0.001), " g/m²\n"
      )
    ),
    alpha = 0.7, size = 2
  ) +
  scale_color_manual(values = c(
    "H" = "#E69F00",   # Orange
    "L" = "#0072B2"    # Blue
  ))+
  labs(
    x = "Above ground biomass (g/m²)",
    y = "Below ground biomass  (g/m²)",
    color = "Area"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = c(0.02, 0.98),
    legend.justification = c(0, 1),
    legend.background = element_rect(fill = scales::alpha("white", 0.6), color = "grey80"),
    legend.title = element_text(size = 13),
    legend.text  = element_text(size = 12),
    axis.title   = element_text(size = 14, face = "bold"),
    axis.text    = element_text(size = 12),
    panel.grid.minor = element_blank()
  )

girafe(
  ggobj = p,
  width_svg = 7, height_svg = 5,
  options = list(
    opts_tooltip(opacity = .95),
    opts_hover(css = "r:4pt; stroke-width: 2;")
  )
)

```

The relationship between the below ground and above ground biomass of *Zostera noltei* in Bourgneuf Bay can be describe as follow:

$$
Below_{Ground} = 0.64 * Above_{Ground} + 10.04
$$

Site L and Site H have a similar relationship between those two variables (@fig-Above_Below).

# Hyperspectral signature zone H

Only in Zone H, before coring, a hyperspectral signature of the sample
was taken using an ASD Fieldspec HandHeld 2. The instrument was
calibrated in the field for reflectance acquisition using a Spectralon
with a 99% reflective Lambertian surface (No radiance measurement has
been done).

```{r Hyperspectral signature}
#| label: fig-hyperspectral
#| fig-cap: Hyperspectrale signature of each core of the Area H. Left plot show the raw reflectance signature while the right plot shows the min-max standardised signatures. 
#| echo: false
#| error: false
#| message: false
#| warning: false
#| out-width: "95%"

library(ggplot2)
library(ggiraph)
library(scales)
library(dplyr)
library(tidyverse)
library(plotly)

df_sp <- read.delim("data/spectra/20250911_Bourgneuf_H_stations_reflectance.txt") %>% 
  pivot_longer(-Wavelength, names_to = "spectra", values_to = "ref") %>% 
  mutate(spectra = substr(spectra, 1,3)) %>% 
  group_by(Wavelength, spectra) %>% 
  reframe(ref_mean = mean(ref, na.rm = T),
          sd = sd(ref)) %>% 
  ungroup() %>% 
  mutate(spectra = gsub("H","H_",spectra)) %>% 
  dplyr::filter(Wavelength > 400,
                Wavelength < 900) %>% 
  group_by(spectra) %>% 
  mutate(ref_std = (ref_mean - min(ref_mean))/(max(ref_mean)-min(ref_mean))) %>% 
  dplyr::select(-sd) %>% 
  pivot_longer(c(ref_mean,ref_std), names_to = "Proc",values_to = "value") %>% 
  ungroup() %>% 
  mutate(Proc = case_when(Proc == "ref_mean" ~ "Raw",
                          T ~ "Standardised"))


# df_sp already created above

# make spectra a nicely ordered factor (optional)
df_sp <- df_sp %>%
  arrange(spectra, Wavelength) %>%
  mutate(spectra = factor(spectra, levels = sort(unique(spectra))))

p <- ggplot(
  df_sp,
  aes(x = Wavelength, y = value, color = spectra, group = spectra)
) +
  facet_wrap(~Proc, scales = "free")+
  # interactive line: tooltip shows spectra; data_id enables hover styling
  geom_line_interactive(
    aes(tooltip = paste0("Spectra: ", spectra),
        data_id  = spectra),
    linewidth = 0.9, alpha = 0.9, show.legend = F
  ) +
  scale_color_viridis_d(option = "viridis", end = 0.95) +
  scale_y_continuous(labels = label_percent(accuracy = 1)) +
  labs(
    x = "Wavelength (nm)",
    y = "Reflectance",
    color = "Spectra"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "top",
    legend.title = element_text(size = 12),
    legend.text  = element_text(size = 11),
    axis.title   = element_text(size = 13, face = "bold"),
    axis.text    = element_text(size = 11),
    panel.grid.minor = element_blank()
  )

girafe(
  ggobj = p,
  width_svg = 7, height_svg = 5,
  options = list(
    # thicken the line you hover, fade others
    opts_hover(css = "stroke-width:2.5px;"),
    opts_hover_inv(css = "opacity:0.25;"),
    # nicer tooltip
    opts_tooltip(opacity = .95, css = "padding:6px; font-size:12px;")
  )
)

```

@fig-hyperspectral shows the hyperspectral signature of all the cores of the area H. Spectra are showing differente level of reflectance, with core H_04 having a relatively strong overall reflectance, with an small absorption peak around 665 nm due to the presence of chlorophyll-a. On the other hand the spectra H_30 is showing a lower overall reflectance, with really low reflectance in the visible and a strong absorption peak of chlorophyll-a around 665nm.

## About the reflectance anomaly around 760 nm. 

An unexpected reflectance feature can be observed around 761 nm in most of the spectra (@fig-hyperspectral). This feature appears as a positive anomaly in some cases, such as H_04 or H_03, or as a negative anomaly, as in H_02 or H_19. The most likely explanation is an instrumental artifact, for example related to calibration issues of the ASD spectroradiometer. Nevertheless, it is worth noting that at 761 nm vegetation can also produce a narrow reflectance peak due to sunlight-induced chlorophyll fluorescence (SIF). This fluorescence signal arises from the broad chlorophyll a emission around 740 nm that partly fills the atmospheric O₂ absorption band, and has been documented both in terrestrial and aquatic vegetation ([Lu et al. 2016](https://doi.org/10.1002/2016JC011797), [Meroni & Colombo, 2006](https://doi.org/10.1016/j.rse.2006.03.016)). 

To investigate the origin of this feature, the Fluorescence Line Height (FLH;[Lu et al. 2016](https://doi.org/10.1002/2016JC011797)) will be calculated. 

$$
\mathrm{FLH}(761)
= R_{rs}(761)
- \left[
\frac{769-761}{769-757}
\big(R_{rs}(757)-R_{rs}(769)\big)
+ R_{rs}(769)
\right]
$$

The FLH values will be compared with NDVI, as proxy of the biomass, with the green leaf index proxy of the greeness of seagrass leaves as well as with the amount of time the ASD had been operating at the moment of spectrum acquisition.

@fig-LH_Index is showing the ralationship between the FLH, measuring the height of the peak visible at 761 nm, and the NDVI and the GLI. No relationship between the size of the anomaly and those radiometric indices can been seen from the data acquired on site H. No matter the biomass, and no matter the greenness of leaves, the peak at 761 nm can be more or less pronounced.

```{r LH vs NDVI}
#| label: fig-LH_Index
#| fig-cap: Relationship between the Fluorescence Line Height (FLH) and radiometric indices. The Normalised difference vegetation index is a proxy of the biomass while the Green Leaf Index is a proxy of leaves greenness. 
#| echo: false
#| error: false
#| message: false
#| warning: false
#| out-width: "95%"

library(dplyr)
library(purrr)

df_sp <- read.delim("data/spectra/20250911_Bourgneuf_H_stations_reflectance.txt") %>% 
  pivot_longer(-Wavelength, names_to = "spectra", values_to = "ref") %>% 
  mutate(spectra = substr(spectra, 1,3)) %>% 
  group_by(Wavelength, spectra) %>% 
  reframe(ref_mean = mean(ref, na.rm = T),
          sd = sd(ref)) 


# --- Target wavelengths ---
l1 <- 757; l2 <- 761; l3 <- 769
wl_red <- 670; wl_nir <- 800
wl_green <- 550; wl_blue <- 450

# --- Indices per spectrum (with linear interpolation) ---
indices <- df_sp %>% 
  arrange(spectra, Wavelength) %>%
  group_by(spectra) %>%
  summarise(
    R757  = approx(Wavelength, ref_mean, xout = l1,      rule = 2)$y,
    R761  = approx(Wavelength, ref_mean, xout = l2,      rule = 2)$y,
    R769  = approx(Wavelength, ref_mean, xout = l3,      rule = 2)$y,
    Rred  = approx(Wavelength, ref_mean, xout = wl_red,  rule = 2)$y,
    Rnir  = approx(Wavelength, ref_mean, xout = wl_nir,  rule = 2)$y,
    Rgrn  = approx(Wavelength, ref_mean, xout = wl_green,rule = 2)$y,
    Rblue = approx(Wavelength, ref_mean, xout = wl_blue, rule = 2)$y,
    .groups = "drop"
  ) %>%
  mutate(
    # FLH at 761 nm
    FLH  = R761 - ( ((l3 - l2) / (l3 - l1)) * (R757 - R769) + R769 ),
    # NDVI (NIR 800 / Red 670)
    NDVI = (Rnir - Rred) / (Rnir + Rred),
    # GLI (Green Leaf Index)
    GLI  = (2*Rgrn - Rred - Rblue) / (2*Rgrn + Rred + Rblue)
  )

# --- Long form for faceting: NDVI vs FLH and GLI vs FLH ---
plot_df <- indices %>%
  select(spectra, FLH, NDVI, GLI) %>%
  tidyr::pivot_longer(c(NDVI, GLI), names_to = "Index", values_to = "Value") %>%
  mutate(Index = factor(Index, levels = c("NDVI","GLI"))) %>%
  arrange(Index, FLH)

# --- Interactive, facetted plot ---
p <- ggplot(plot_df, aes(x = FLH, y = Value)) +
  geom_smooth(method = "lm", formula = y ~ x, se = TRUE, linewidth = 1, color = "grey30") +
  geom_point_interactive(
    aes(
      tooltip = paste0(
        "Sample: ", spectra, "\n",
        "FLH: ", number(FLH, accuracy = 0.00001), "\n",
        Index, ": ", number(Value, accuracy = 0.003)
      ),
      data_id = spectra
    ),
    size = 2.4, alpha = 0.85
  ) +
  facet_wrap(~ Index, ncol = 2, scales = "free") +
  labs(
    title = "Relationships of NDVI and GLI with FLH",
    x = "FLH",
    y = "Index value"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "none",
    strip.text = element_text(size = 13, face = "bold"),
    axis.title = element_text(size = 13, face = "bold"),
    panel.grid.minor = element_blank()
  )

girafe(
  ggobj = p,
  width_svg = 9, height_svg = 5,
  options = list(
    opts_tooltip(css = "background:rgba(0,0,0,.9); color:#fff; padding:6px 8px; border-radius:4px;"),
    opts_hover(css = "r:4pt; stroke:#222; stroke-width:1.5px;"),
    opts_hover_inv(css = "opacity:0.25;")
  )
)
```

To estimate, for each spectrum, how long the instrument had been running at the time of acquisition, we extracted the capture time of the corresponding photo-quadrat from the images’ EXIF metadata. Because the photo-quadrats were taken a few minutes before the hyperspectral measurements, their timestamps provide a close proxy for the acquisition time; aligning these timestamps with the instrument start time yields the elapsed operating time for each spectrum. Sample H_01 was acquired first. By convention, we set its instrument run time to 0 (min), and the run time for all subsequent samples is expressed relative to H_01—that is, as the difference between each sample’s acquisition timestamp and that of H_01.

```{r Running_Time vs FLH}
#| label: fig-LH_runningtime
#| fig-cap: Relationship between the Fluorescence Line Height (FLH) and the amount of time the ASD Specfield Handheld 2 has been running. 
#| echo: false
#| error: false
#| message: false
#| warning: false
#| cache: true
#| out-width: "95%"

library(exiftoolr)
library(tidyverse)

files <- list.files("data/imgs/RAW_H", pattern = "\\.(jpe?g|tif?f)$", full.names = TRUE)

j <- exif_read(files[1])$ModifyDate


df_acquisition <- map_df(files, function(f) {
  x <- exif_read(f, tags = "ModifyDate")
  tibble(
    file               = f,
    AcquisitionDate    = x$ModifyDate
  )
}) %>% 
  mutate(AcquisitionDate = as.POSIXct(AcquisitionDate, format = "%Y:%m:%d %H:%M:%OS"),
         filename = gsub(".*/","",file),
         sample = substr(filename,1,4))

initial_date <- df_acquisition %>% 
  dplyr::filter(sample == "H_01") %>% 
  pull(AcquisitionDate)

df_acquisition <- df_acquisition %>% 
  mutate(running_time = AcquisitionDate - initial_date) %>% 
  left_join(indices %>%
              select(spectra, FLH, NDVI, GLI) %>% 
              mutate(spectra = gsub("H","H_",spectra)), by = c("sample" = "spectra"))

p <- ggplot(df_acquisition, aes(x = running_time, y = FLH)) +
  geom_smooth(method = "lm", formula = y ~ x, se = TRUE, linewidth = 1, color = "grey30") +
  geom_point_interactive(
    aes(tooltip = sample, data_id = sample),
    size = 2.6, alpha = 0.85
  ) +
  labs(
    title = "FLH vs. instrument running time",
    x = "Instrument running time (seconds)",
    y = "FLH"
  ) +
  ylim(c(-0.004,0.008))+
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "none",
    strip.text = element_text(size = 13, face = "bold"),
    axis.title = element_text(size = 13, face = "bold"),
    panel.grid.minor = element_blank()
  )

girafe(
  ggobj = p,
  width_svg = 9, height_svg = 5,
  options = list(
    opts_tooltip(css = "background:rgba(0,0,0,.9); color:#fff; padding:6px 8px; border-radius:4px;"),
    opts_hover(css = "r:4pt; stroke:#222; stroke-width:1.5px;"),
    opts_hover_inv(css = "opacity:0.25;")
  )
)

```

@fig-LH_runningtime shows the relationship between ASD run time and the fluorescence line height at 761 nm (FLH). Sample H_01 was acquired immediately after startup (T0), and the last sample in the sequence, H_08, was collected 7,316 s (≈ 122 min) after T0. A negative linear trend can be seen (grey 95% CI shown): FLH values are highest at the beginning of the session and decline as the instrument continues to run, with several late measurements approaching zero or slightly negative values.

## Radiometric indices vs Biomass

```{r find the index the most linked with above ground biomass}
#| echo: false
#| error: false
#| message: false
#| warning: false
#| eval: false

library(dplyr)
library(tidyr)
library(purrr)
library(broom)


Core_Diameter <- 15
core_area <- pi * ((Core_Diameter/2)^2)
correction_factor <- (100*100)/core_area

dryweight <- readxl::read_xlsx("data/DryWeight_Cores.xlsx") %>% 
  mutate(A = A * correction_factor,
         B = B * correction_factor)
# ---- Step 1: Define helper for index calculation ----
compute_indices <- function(df, 
                            wl_red = 670, wl_nir = 800, 
                            wl_blue = 450, wl_green = 550, 
                            wl_rededge = 705, wl_445 = 445, wl_750 = 750) {
  
  # interpolate reflectances
  red   <- approx(df$Wavelength, df$ref_mean, xout = wl_red)$y
  nir   <- approx(df$Wavelength, df$ref_mean, xout = wl_nir)$y
  blue  <- approx(df$Wavelength, df$ref_mean, xout = wl_blue)$y
  green <- approx(df$Wavelength, df$ref_mean, xout = wl_green)$y
  re    <- approx(df$Wavelength, df$ref_mean, xout = wl_rededge)$y
  r445  <- approx(df$Wavelength, df$ref_mean, xout = wl_445)$y
  r750  <- approx(df$Wavelength, df$ref_mean, xout = wl_750)$y
  
  tibble(
    # Classic indices
    NDVI   = (nir - red) / (nir + red),
    SR     = nir / red,
    MSR    = (nir/red - 1) / sqrt(nir/red + 1),
    DVI    = nir - red,
    RVI    = red / nir,
    
    # Soil/structure corrected
    SAVI   = 1.5 * (nir - red) / (nir + red + 0.5),
    OSAVI  = 1.16 * (nir - red) / (nir + red + 0.16),
    TSAVI  = (0.08 * (nir - 0.5*red - 0.08)) / (red + 0.5*nir + 0.08),
    
    # Atmosphere resistant
    EVI    = 2.5 * (nir - red) / (nir + 6*red - 7.5*blue + 1),
    EVI2   = 2.5 * (nir - red) / (nir + 2.4*red + 1),
    
    # Greenness indices
    GNDVI  = (nir - green) / (nir + green),
    VARI   = (green - red) / (green + red - blue),
    CIG    = (nir / green) - 1,   # chlorophyll index green
    CIRE   = (nir / re) - 1,      # chlorophyll index red edge
    
    # Red edge indices
    NDRE   = (nir - re) / (nir + re),
    
    # Other spectral indices
    MTVI2  = (1.5 * (1.2*(nir - green) - 2.5*(red - green))) / sqrt((2*nir + 1)^2 - (6*nir - 5*sqrt(red)) - 0.5),
    MCARI  = ((re - red) - 0.2*(re - green)) * (re/red),
    
    # Pigment indices
    PRI    = (green - re) / (green + re),
    SIPI   = (nir - blue) / (nir - red),
    
    # Simple phenology-related
    NDWI   = (nir - green) / (nir + green),   # often used for water content
    ARVI   = (nir - (2*red - blue)) / (nir + (2*red - blue)),
    
    # --- New index ---
    mND705 = (r750 - re) / (r750 + re - 2 * r445)
  )
}



# ---- Step 2: Apply to each spectrum ----
# Suppose `spectra_df` has columns: Spectra, Wavelength, Reflectance
# and `biomass_df` has columns: Spectra, A (above-ground biomass)

indices_df <- df_sp %>%
  group_by(spectra) %>%
  group_modify(~ compute_indices(.x)) %>%
  ungroup()

# ---- Step 3: Join with biomass ----
data_all <- indices_df %>%
  mutate(spectra = gsub("H","H_",spectra)) %>% 
  left_join(dryweight, by = c("spectra" = "Station"))


# ---- Step 4: Correlate each index with biomass ----
results <- data_all %>%
  pivot_longer(cols = -c(spectra,A,B), names_to = "Index", values_to = "Value") %>%
  group_by(Index) %>%
  summarise(
    model = list(lm((A) ~ Value, data = cur_data())),
    .groups = "drop"
  ) %>%
  mutate(
    glance = map(model, broom::glance)
  ) %>%
  unnest(glance) %>%
  arrange(desc(r.squared)) %>%
  select(Index, r.squared, adj.r.squared, p.value)

print(results)


```

From those spectral signatures, a range of spectral indices were tested to identify the one with the strongest relationship to above-ground biomass. All the indices listed below were evaluated, but only the results for the best-performing index and the NDVI are shown. 

$$
\begin{aligned}
\text{NDVI}   &= \frac{R_{NIR} - R_{Red}}{R_{NIR} + R_{Red}}       &\quad
\text{GNDVI}  &= \frac{R_{NIR} - R_{Green}}{R_{NIR} + R_{Green}} \\[6pt]
\text{SR}     &= \frac{R_{NIR}}{R_{Red}}                           &\quad
\text{VARI}   &= \frac{R_{Green} - R_{Red}}{R_{Green} + R_{Red} - R_{Blue}} \\[6pt]
\text{MSR}    &= \frac{\tfrac{R_{NIR}}{R_{Red}} - 1}{\sqrt{\tfrac{R_{NIR}}{R_{Red}} + 1}} &\quad
\text{CIG}    &= \frac{R_{NIR}}{R_{Green}} - 1 \\[6pt]
\text{DVI}    &= R_{NIR} - R_{Red}                                  &\quad
\text{CIRE}   &= \frac{R_{NIR}}{R_{RE}} - 1 \\[6pt]
\text{RVI}    &= \frac{R_{Red}}{R_{NIR}}                            &\quad
\text{NDRE}   &= \frac{R_{NIR} - R_{RE}}{R_{NIR} + R_{RE}} \\[6pt]
\text{SAVI}   &= \frac{1.5 \, (R_{NIR} - R_{Red})}{R_{NIR} + R_{Red} + 0.5} &\quad
\text{MTVI2}  &= \frac{1.5 \left[ 1.2(R_{NIR} - R_{Green}) - 2.5(R_{Red} - R_{Green}) \right]}
{\sqrt{(2R_{NIR}+1)^2 - (6R_{NIR} - 5\sqrt{R_{Red}}) - 0.5}} \\[6pt]
\text{OSAVI}  &= \frac{1.16 \, (R_{NIR} - R_{Red})}{R_{NIR} + R_{Red} + 0.16} &\quad
\text{MCARI}  &= \left[(R_{RE} - R_{Red}) - 0.2(R_{RE} - R_{Green})\right] \frac{R_{RE}}{R_{Red}} \\[6pt]
\text{TSAVI}  &= \frac{0.08 \, (R_{NIR} - 0.5R_{Red} - 0.08)}{R_{Red} + 0.5R_{NIR} + 0.08} &\quad
\text{PRI}    &= \frac{R_{Green} - R_{RE}}{R_{Green} + R_{RE}} \\[6pt]
\text{EVI}    &= \frac{2.5 \, (R_{NIR} - R_{Red})}{R_{NIR} + 6R_{Red} - 7.5R_{Blue} + 1} &\quad
\text{SIPI}   &= \frac{R_{NIR} - R_{Blue}}{R_{NIR} - R_{Red}} \\[6pt]
\text{EVI2}   &= \frac{2.5 \, (R_{NIR} - R_{Red})}{R_{NIR} + 2.4R_{Red} + 1} &\quad
\text{NDWI}   &= \frac{R_{NIR} - R_{Green}}{R_{NIR} + R_{Green}} \\[6pt]
\text{mND705} &= \frac{R_{750} - R_{705}}{R_{750} + R_{705} - 2R_{445}} &\quad &
\end{aligned}
$$

The index with the highest R² against above-ground biomass is NDRE. NDRE is analogous to NDVI but replaces the red band (~665 nm) with a red-edge band (typically ~705 nm):
The advantage is reduced saturation at high biomass. Around 665 nm, chlorophyll-a absorption quickly reaches an asymptote, so reflectance in the red band changes little as biomass increases and NDVI tends to plateau. In the red-edge region, however, reflectance remains sensitive: as biomass/chlorophyll increases, reflectance near ~705 nm continues to decrease (with a concomitant shift of the red-edge to longer wavelengths). Consequently, NDRE preserves sensitivity in dense canopies and correlates more strongly with biomass than NDVI, resulting with an R² square slightly higher than for the NDVI (R²_NDVI = 0.65, R²_NDRE = 0.67)... -_-'

```{r Plot NDVI dryweight}
#| label: fig-hyperspectral_dryweight
#| fig-cap: Relationship between the NDRE, the NDVI and the dry weight of seagrasses measured in area H 
#| echo: false
#| error: false
#| message: false
#| warning: false
#| out-width: "95%"

library(dplyr)
library(tidyr)
library(ggplot2)
library(ggiraph)
library(scales)

# --- wavelengths ---
wl_red  <- 670   # NDVI red
wl_nir  <- 750   # NDVI/NDRE NIR
wl_re   <- 705   # red-edge for NDRE

Core_Diameter <- 15
core_area <- pi * ((Core_Diameter/2)^2)
correction_factor <- (100*100)/core_area

# --- spectra (as you had) ---
df_sp <- read.delim("data/spectra/20250911_Bourgneuf_H_stations_reflectance.txt") %>% 
  pivot_longer(-Wavelength, names_to = "spectra", values_to = "ref") %>% 
  mutate(spectra = substr(spectra, 1, 3)) %>% 
  group_by(Wavelength, spectra) %>% 
  reframe(ref_mean = mean(ref, na.rm = TRUE),
          sd = sd(ref)) %>% 
  ungroup() %>% 
  mutate(spectra = gsub("H","H_", spectra))

# --- NDVI + NDRE per spectrum (linear interpolation to target λ) ---
indices <- df_sp %>% 
  arrange(spectra, Wavelength) %>%
  group_by(spectra) %>%
  summarise(
    red = approx(Wavelength, ref_mean, xout = wl_red, rule = 2)$y,
    re  = approx(Wavelength, ref_mean, xout = wl_re,  rule = 2)$y,
    nir = approx(Wavelength, ref_mean, xout = wl_nir, rule = 2)$y,
    NDVI = (nir - red) / (nir + red),
    NDRE = (nir - re)  / (nir + re),
    .groups = "drop"
  )

# --- biomass (convert to g/m²) ---
dryweight <- readxl::read_xlsx("data/DryWeight_Cores.xlsx") %>% 
  mutate(A = A * correction_factor,
         B = B * correction_factor)

# --- prepare data for plotting (Above-ground only) ---
plot_df <- indices %>% 
  left_join(dryweight, by = c("spectra" = "Station")) %>% 
  transmute(
    spectra,
    Biomass = A,
    NDVI, NDRE
  ) %>% 
  pivot_longer(c(NDVI, NDRE), names_to = "Index", values_to = "Value") %>% 
  mutate(Index = factor(Index, levels = c("NDVI","NDRE"))) %>%
  arrange(Index, Biomass)

# --- interactive two-panel plot (NDVI left, NDRE right) ---
p <- ggplot(
  plot_df,
  aes(x = Biomass, y = Value)
) +
  geom_smooth(method = "lm", se = TRUE, alpha = 0.12, linewidth = 1, color = "grey30") +
  geom_point_interactive(
    aes(
      tooltip = paste0(
        "Sample: ", spectra, "\n",
        "Biomass: ", number(Biomass, accuracy = 0.01), " g/m²\n",
        Index, ": ", number(Value, accuracy = 0.003)
      ),
      data_id = spectra
    ),
    size = 2, alpha = 0.8
  ) +
  facet_wrap(~ Index, ncol = 2) +   # NDVI (left) and NDRE (right)
  labs(
    x = "Above-ground biomass (g/m²)",
    y = "Index value"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "none",
    strip.text = element_text(size = 13, face = "bold"),
    axis.title = element_text(size = 14, face = "bold"),
    panel.grid.minor = element_blank()
  )

girafe(
  ggobj = p,
  width_svg = 9, height_svg = 5,
  options = list(
    opts_tooltip(opacity = .95),
    opts_hover(css = "r:4pt; stroke-width: 2;"),
    opts_hover_inv(css = "opacity:0.25;")
  )
)

```


```{r leafletmap}
#| fig-cap: Map of Bourgneuf Bay Sampling site
#| echo: false
#| error: false
#| message: false
#| eval: false
#| warning: false
#| out-width: "95%"

library(tidyverse)
library(leaflet)
library(sf)
library(leafem)
library(leaflet.extras2)
library(terra)

# folder structure: ./www/imgs/...
img_list <- list.files("data/imgs", recursive = TRUE, full.names = TRUE, pattern = "\\.jpg$") %>%
  tibble(path = .) %>%
  mutate(filename = basename(path),
         station  = substr(filename, 1, 4),
         url      = paste0(file.path("imgs", filename)))

Points <- sf::st_read("data/shp/Core_Location/Points.shp", quiet = TRUE) %>%
  left_join(img_list, by = c("Name" = "station")) %>%
  filter(!is.na(url))

leaflet() %>%
  setView(lng = -2.176695, lat = 46.962474, zoom = 15) %>%
  addProviderTiles(providers$Esri.WorldImagery, group = "Imagery",
                   options = providerTileOptions(minZoom = 8, maxZoom = 20)) %>%
  addCircleMarkers(
    data = Points, radius = 2, color = "lightgreen", fillColor = "lightgreen", fillOpacity = 0.8,
    group = "Coring stations",
    popup = ~sprintf("<img src='%s' width='400'/>", url),
    popupOptions = popupOptions(
    maxWidth  = 450,    # Maximum width of the popup
    minWidth  = 100,    # Minimum width of the popup
    maxHeight = 600)
  ) %>%
  addLayersControl(overlayGroups = "Coring stations",
                   options = layersControlOptions(collapsed = FALSE))


# htmlwidgets::saveWidget(plot_S2, file="maps/map_Bathy_Quiberon.html", selfcontained = F)

```

```{r zip outputs}
#| echo: false
#| message: false
#| warning: false
#| cache: false
#| eval: true


# ---- settings ----
folder_to_zip <- "data"   # directory whose contents you want to archive
zip_file      <- "Output/Data_REWRITE_Bourgneuf_bay.zip"

# ---- create the zip ----
# list all files (recursive = TRUE grabs sub-folders too; set FALSE if you only
# want the top-level files)
files <- list.files(folder_to_zip, recursive = TRUE, full.names = TRUE)

# make sure you’re in the folder so the archive has relative paths, not full paths

utils::zip(zipfile = zip_file, files = files)
```
